'
'  Copyright (c) 2021 Daimler TSS GmbH
'
'  This program and the accompanying materials are made available under the
'  terms of the Apache License, Version 2.0 which is available at
'  https://www.apache.org/licenses/LICENSE-2.0
'
'  SPDX-License-Identifier: Apache-2.0
'
'  Contributors:
'       Daimler TSS GmbH - Initial Draft
'
'

@startuml

skinParam NoteBackgroundColor WhiteSmoke
skinParam NoteFontColor Black
skinParam ParticipantBackgroundColor WhiteSmoke
skinParam ActorBackgroundColor WhiteSmoke
skinParam AgentBackgroundColor White
skinParam AgentBorderColor SkyBlue
skinparam shadowing false

!define ConsumerColor f8f2ff
!define ProviderColor d9edff
!define WarningColor Business
!define LeadColor Technology

autonumber

participant Consumer as "Consumer" #ConsumerColor

box EDC Provider #ProviderColor
    participant IDS as "IDS Services\n(Controller, Dispatcher, ...)" #lightblue
    participant Store as "Contract Negotiation Store"
    participant TransferStore as "Transfer Process Store"
    participant TransferManager as "Transfer Process Manager"
    participant ManifestGenerator as "Resource Manifest Generator"
    participant ProvisionManager as "Provision Manager"
    participant Provisioners as "Provisioners" #lightblue
    participant DataFlow as "Data Flow Manager"
    participant DataFlowController as "Data Flow Controller" #lightblue
end box

Consumer -> IDS ++: Artifact Request Message
IDS -> IDS : validate token & message
note right: Done by Token Validator
IDS -> Store ++: get contract
return contract
IDS -> IDS: validate contract

IDS --> Consumer: Request In Process Message
IDS -> TransferManager --++: initialize TransferProcess by ContractRef
TransferManager -> Store ++: get contract
return contract
TransferManager -> TransferStore: store TransferProcess

' Resource Definition
TransferManager -> ManifestGenerator ++ : **generate resource definitions**
return ResourceManifest
TransferManager -> TransferStore: store TransferProcess


' Provision
TransferManager -> ProvisionManager++: **provision**
ProvisionManager -> Provisioners++: provision
Provisioners --> ProvisionManager--: callback
ProvisionManager -> TransferStore: store TransferProcess
deactivate ProvisionManager

' Transfer
TransferManager -> DataFlow ++: **initiate data transfer**
DataFlow -> DataFlowController ++ : invoke
return
return

' De-Provision
TransferManager -> ProvisionManager++: **de-provision**
ProvisionManager -> Provisioners++: de-provision
Provisioners --> ProvisionManager--: callback
ProvisionManager -> TransferStore: store TransferProcess
deactivate ProvisionManager

@enduml